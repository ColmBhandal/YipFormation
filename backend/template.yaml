AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: SAM template for backend YipCode resources.

Parameters:
  RootDomainName:
    Type: String
    Description: Root domain name for the hosted zone into which we will deploy this workload.
    AllowedValues:
      - yipcode.com
      - dev.yipcode.com
  HostedZoneStackName:
    Type: String
    Description: The name of the stack that contains the hosted zone.
    AllowedValues:
      - dev-yipcode-zone
      - prod-yipcode-zone
  CognitoDomainPrefix:
    Type: String
    Description: Custom prefix for the Cognito domain name. Note- the remainder of the domain name will be AWS-generated.
    AllowedValues:
      - dev-yipcode-auth
      - yipcode-auth
  FrontOrigin:
    Type: String
    Description: The origin URL of YipFront
    AllowedValues:    
      - yipcode.com
      - dev.yipcode.com

Globals:
  Api:
    Cors:
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
      AllowMethods: "'POST, GET, OPTIONS'"
  Function:
    Handler: index.handler
    Runtime: nodejs16.x
    Timeout: 10
    Tracing: Active

Resources:
  ApiWebCertificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: !Sub "api.${RootDomainName}"
        ValidationMethod: DNS
        DomainValidationOptions:
          - DomainName: !Sub "api.${RootDomainName}"
            HostedZoneId: !ImportValue
              "Fn::Sub": "${HostedZoneStackName}-HostedZoneID"

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: api
      TracingEnabled: true
      OpenApiVersion: 3.0.3
      Auth:
        Authorizers:          
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            Identity:
              Header: Authorization
              ReauthorizeEvery: 300
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False
      Domain:
        DomainName: !Sub "api.${RootDomainName}"
        CertificateArn: !Ref ApiWebCertificate
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: !ImportValue
            "Fn::Sub": "${HostedZoneStackName}-HostedZoneID"

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref RootDomainName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT

  CognitoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoDomainPrefix
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: "StandardClient"
      GenerateSecret: false        
      AllowedOAuthFlowsUserPoolClient: true
      LogoutURLs:
        - http://localhost:8000/logout/handle/index.html
        - !Sub "https://hub.${FrontOrigin}/logout/handle/index.html"
      CallbackURLs:
        - http://localhost:8000/auth/handle/index.html
        - !Sub "https://hub.${FrontOrigin}/auth/handle/index.html"
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
      SupportedIdentityProviders:
        - COGNITO
      RefreshTokenValidity: 3600      
      AccessTokenValidity: 3600
      IdTokenValidity: 3600
      TokenValidityUnits:
        AccessToken: "seconds"
        IdToken: "seconds"
        RefreshToken: "seconds"
        
  # Lambda Functions and Bootstrap Execution Roles

  YipcodesGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/functions/yipcodesGet
      Description: Get all YipCodes for the given user
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref Api        
            Path: /yipcodes
            Method: GET
      Role: !GetAtt YipCodesGetFunctionRole.Arn
  YipCodesGetFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Effect: Allow

  # Lambda Assumable Roles

  LambdaReadUserDataRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ReadUserData
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt YipCodesGetFunctionRole.Arn
            Action:
              - 'sts:AssumeRole'
              - 'sts:TagSession'
            Condition:
              'Null':
                aws:RequestTag/CognitoUserSub: false
              ForAllValues:StringEquals:
                aws:TagKeys: CognitoUserSub           

      Path: /Lambda/
      #TODO: Change this to inline policy
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
