AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: SAM template for deploying YipCode resources to AWS.

Parameters:
  DomainName:
    Type: String
    Description: Root domain name for the static website. Change this based on the target deployment environment.
    AllowedValues:
      - yipcode.com
      - dev.yipcode.com
  CFDistributionPriceClass:
    Type: String
    AllowedValues:
      - PriceClass_All
      - PriceClass_100
      - PriceClass_200
    Description: Price class for CloudFront distribution.
  YipFrontBucketName:
    Type: String
    Description: Name of the S3 Bucket from which to server the static frontend. Note - this can't contain dots or it'll confuse the TLS cert checking.
  # TODO-FF: Can add something like this in when hosting is set up
  # HostedZoneId:
  #   Type: String
  #   Description: Hosted zone ID

Resources:
  CFOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub '${DomainName} CloudFront OAI'
  
  # TODO-FF: Can add bucket for CloudFront logs at a later stage
  # LogBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Sub 'logs.${DomainName}'
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: AES256
  #     AccessControl: Private
  #     VersioningConfiguration:
  #       Status: Enabled
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: true
  #       IgnorePublicAcls: true
  #       BlockPublicPolicy: true
  #       RestrictPublicBuckets: true
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref YipFrontBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Principal:
              CanonicalUser: !GetAtt CFOriginAccessIdentity.S3CanonicalUserId
            Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
  # TODO-FF: Can add something like this in when hosting is set up
  # WebCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: !Ref DomainName
  #     SubjectAlternativeNames:
  #       - !Sub 'www.${DomainName}'
  #     ValidationMethod: DNS
  #     DomainValidationOptions:
  #       - DomainName: !Ref DomainName
  #         HostedZoneId: !Ref HostedZoneId
  #       - DomainName: !Sub 'www.${DomainName}'
  #         HostedZoneId: !Ref HostedZoneId
  
  #TODO: Test with REACT Router paths & use CloudFront redirect if necessary
  CFDistribution:
    Type: AWS::CloudFront::Distribution
    # TODO-FF: Can add bucket for CloudFront logs at a later stage
    # DependsOn:
    #   - LogBucket
    Properties:
      DistributionConfig:
        Enabled: 'true'
        Comment: !Sub 'Distribution for ${DomainName}'
        HttpVersion: http2
        PriceClass: !Ref CFDistributionPriceClass
        DefaultRootObject: index.html
        # TODO-FF: Can add something like this in when hosting is set up
        # Aliases:
        #   - !Ref DomainName
        #   - !Sub 'www.${DomainName}'
        Origins:
          - Id: !Sub 'S3-${YipFrontBucketName}'
            DomainName: !Sub '${YipFrontBucketName}.s3.amazonaws.com'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CFOriginAccessIdentity}'        
        DefaultCacheBehavior:
          TargetOriginId: !Sub 'S3-${YipFrontBucketName}'
          Compress: true
          # CachingOptimized managed cache policy
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          ViewerProtocolPolicy: redirect-to-https
        # TODO-FF: Can add something like this in when hosting is set up
        # ViewerCertificate:
        #   AcmCertificateArn: !Ref WebCertificate
        #   SslSupportMethod: sni-only
        #   MinimumProtocolVersion: TLSv1.2_2019
        # TODO-FF: Can add bucket for CloudFront logs at a later stage
        # Logging:
        #   IncludeCookies: false
        #   Bucket: !Sub 'logs.${DomainName}.s3.amazonaws.com'
        #   Prefix: cf-logs
  # TODO-FF: Can add something like this in when hosting is set up
  # DNSRecordSet:
  #   Type: AWS::Route53::RecordSetGroup
  #   Properties:
  #     Comment: !Sub 'DNS records for ${DomainName}'
  #     HostedZoneId: !Ref HostedZoneId
  #     RecordSets:
  #       - Name: !Ref DomainName
  #         Type: A
  #         AliasTarget:
  #           DNSName: !GetAtt CFDistribution.DomainName
  #           EvaluateTargetHealth: false
  #           HostedZoneId: Z2FDTNDATAQYW2
  #       - Name: !Ref DomainName
  #         Type: AAAA
  #         AliasTarget:
  #           DNSName: !GetAtt CFDistribution.DomainName
  #           EvaluateTargetHealth: false
  #           HostedZoneId: Z2FDTNDATAQYW2
  #       - Name: !Sub 'www.${DomainName}'
  #         Type: A
  #         AliasTarget:
  #           DNSName: !GetAtt CFDistribution.DomainName
  #           EvaluateTargetHealth: false
  #           HostedZoneId: Z2FDTNDATAQYW2
  #       - Name: !Sub 'www.${DomainName}'
  #         Type: AAAA
  #         AliasTarget:
  #           DNSName: !GetAtt CFDistribution.DomainName
  #           EvaluateTargetHealth: false
  #           HostedZoneId: Z2FDTNDATAQYW2